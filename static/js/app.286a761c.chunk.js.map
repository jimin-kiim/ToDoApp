{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","loading","setLoading","editText","setEditText","useEffect","loadToDos","a","async","AsnyncStorage","getItem","s","JSON","parse","state","onChangeEditText","payload","saveToDos","toSave","setItem","stringify","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","returnKeyType","onSubmitEditing","newToDos","Date","now","done","editing","onChangeText","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","wrapper","id","currentState","flipTodoState","MaterialCommunityIcons","name","size","submitEditToDo","editingInput","toDoText","doneToDoText","editToDo","Feather","paddingRight","Platform","OS","confirm","Alert","alert","deleteToDo","Ionicons","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","paddingLeft","textDecorationStyle","textDecorationLine","marginLeft","borderBottomColor","borderBottomWidth"],"mappings":"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","file":"static/js/app.286a761c.chunk.js","sourcesContent":["export const theme = {\n    bg: \"black\",\n    grey: \"#3A3D40\",\n    toDoBg: \"#1A1C20\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport {\n    StyleSheet,\n    Text,\n    View,\n    TouchableOpacity,\n    TextInput,\n    ScrollView,\n    Alert,\n    AsyncStorage,\n    Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport React, { useEffect, useState } from \"react\";\nimport AsnyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Ionicons, MaterialCommunityIcons, Feather } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\";\nconst WORKING_STATE = \"@state\";\n\nexport default function App() {\n    const [working, setWorking] = useState(true);\n    const [text, setText] = useState(\"\");\n    const [toDos, setToDos] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [editText, setEditText] = useState(\"\");\n    const travel = () => {\n        setWorking(false);\n        AsnyncStorage.setItem(WORKING_STATE, \"false\");\n    };\n    const work = () => {\n        setWorking(true);\n        AsnyncStorage.setItem(WORKING_STATE, \"true\");\n    };\n    useEffect(() => {\n        loadToDos();\n    }, []);\n\n    const loadToDos = async () => {\n        const s = await AsnyncStorage.getItem(STORAGE_KEY);\n        setToDos(JSON.parse(s));\n        setLoading(false);\n        const state = await AsnyncStorage.getItem(WORKING_STATE);\n        setWorking(JSON.parse(state));\n    };\n\n    const addToDo = () => {\n        if (text == \"\") {\n            return;\n        }\n        const newToDos = {\n            ...toDos,\n            [Date.now()]: { text, working, done: \"false\", editing: \"false\" },\n        };\n        setToDos(newToDos);\n        saveToDos(newToDos);\n        setText(\"\");\n    };\n\n    const onChangeText = (payload) => setText(payload);\n\n    const flipTodoState = (id) => {\n        const newToDos = { ...toDos };\n        var currentState = newToDos[id].done;\n        newToDos[id].done = currentState === \"true\" ? \"false\" : \"true\";\n        setToDos(newToDos);\n        saveToDos(newToDos);\n    };\n\n    const editToDo = (id) => {\n        const newToDos = { ...toDos };\n        newToDos[id].editing = \"true\";\n        setToDos(newToDos);\n        saveToDos(newToDos);\n        setEditText(newToDos[id].text);\n    };\n\n    const submitEditToDo = (id) => {\n        const newToDos = { ...toDos };\n        newToDos[id].text = editText;\n        newToDos[id].editing = \"false\";\n        setToDos(newToDos);\n        saveToDos(newToDos);\n        setEditText(\"\");\n    };\n\n    const onChangeEditText = (payload) => {\n        setEditText(payload);\n    };\n\n    const deleteToDo = (id) => {\n        if (Platform.OS === \"web\") {\n            const ok = confirm(\"Do you want to delete this To Do?\");\n            if (ok) {\n                const newToDos = { ...toDos };\n                delete newToDos[id];\n                setToDos(newToDos);\n                saveToDos(newToDos);\n            }\n        } else {\n            Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n                { text: \"Cancel\" },\n                {\n                    text: \"I'm sure\",\n                    style: \"destructive\",\n                    onPress: () => {\n                        const newToDos = { ...toDos };\n                        delete newToDos[id];\n                        setToDos(newToDos);\n                        saveToDos(newToDos);\n                    },\n                },\n            ]);\n        }\n    };\n\n    const saveToDos = async (toSave) => {\n        await AsnyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    };\n\n    return (\n        <View style={styles.container}>\n            <StatusBar style=\"auto\" />\n            <View style={styles.header}>\n                <TouchableOpacity onPress={work}>\n                    <Text\n                        style={{\n                            fontSize: 45,\n                            fontWeight: \"600\",\n                            color: working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Work\n                    </Text>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={travel}>\n                    <Text\n                        style={{\n                            fontSize: 45,\n                            fontWeight: \"600\",\n                            color: !working ? \"white\" : theme.grey,\n                        }}\n                    >\n                        Travel\n                    </Text>\n                </TouchableOpacity>\n            </View>\n\n            <TextInput\n                returnKeyType=\"done\"\n                onSubmitEditing={addToDo}\n                onChangeText={onChangeText}\n                value={text}\n                placeholder={\n                    working ? \"Add a To Do\" : \"Where do you want to go?\"\n                }\n                style={styles.input}\n            ></TextInput>\n            <ScrollView>\n                {toDos !== null ? (\n                    loading === true ? (\n                        <Text>Loading...</Text>\n                    ) : (\n                        Object.keys(toDos).map((key) =>\n                            toDos[key].working === working ? (\n                                <View style={styles.toDo} key={key}>\n                                    <View style={styles.wrapper}>\n                                        <TouchableOpacity\n                                            onPress={() => flipTodoState(key)}\n                                        >\n                                            <MaterialCommunityIcons\n                                                name={\n                                                    toDos[key].done === \"true\"\n                                                        ? \"checkbox-intermediate\"\n                                                        : \"checkbox-blank-outline\"\n                                                }\n                                                size={24}\n                                                color=\"white\"\n                                            />\n                                        </TouchableOpacity>\n                                        {toDos[key].editing === \"true\" ? (\n                                            <TextInput\n                                                returnKeyType=\"done\"\n                                                onSubmitEditing={() =>\n                                                    submitEditToDo(key)\n                                                }\n                                                onChangeText={onChangeEditText}\n                                                value={editText}\n                                                style={styles.editingInput}\n                                            ></TextInput>\n                                        ) : (\n                                            <Text\n                                                style={[\n                                                    styles.toDoText,\n                                                    toDos[key].done === \"true\"\n                                                        ? styles.doneToDoText\n                                                        : null,\n                                                ]}\n                                            >\n                                                {toDos[key].text}\n                                            </Text>\n                                        )}\n                                    </View>\n                                    <View style={styles.wrapper}>\n                                        <TouchableOpacity\n                                            onPress={() => editToDo(key)}\n                                        >\n                                            <Feather\n                                                name=\"edit-3\"\n                                                size={17}\n                                                color={theme.grey}\n                                                style={{ paddingRight: 7 }}\n                                            />\n                                        </TouchableOpacity>\n                                        <TouchableOpacity\n                                            onPress={() => deleteToDo(key)}\n                                        >\n                                            <Ionicons\n                                                name=\"ios-trash-outline\"\n                                                size={17}\n                                                color={theme.grey}\n                                            />\n                                        </TouchableOpacity>\n                                    </View>\n                                </View>\n                            ) : null\n                        )\n                    )\n                ) : null}\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: theme.bg,\n        paddingHorizontal: 20,\n    },\n    header: {\n        justifyContent: \"space-between\",\n        flexDirection: \"row\",\n        marginTop: 100,\n    },\n\n    input: {\n        backgroundColor: \"white\",\n        paddingVertical: 15,\n        paddingHorizontal: 20,\n        borderRadius: 30,\n        marginVertical: 20,\n        fontSize: 18,\n    },\n    toDo: {\n        backgroundColor: theme.toDoBg,\n        marginBottom: 10,\n        paddingVertical: 20,\n        paddingHorizontal: 20,\n        borderRadius: 15,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n    },\n    toDoText: {\n        color: \"white\",\n        fontSize: 16,\n        fontWeight: \"500\",\n        paddingLeft: 20,\n    },\n    doneToDoText: {\n        textDecorationStyle: \"solid\",\n        textDecorationLine: \"line-through\",\n        color: theme.grey,\n    },\n    wrapper: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n    },\n    editingInput: {\n        color: \"white\",\n        fontSize: 16,\n        fontWeight: \"300\",\n        marginLeft: 20,\n        borderBottomColor: theme.grey,\n        borderBottomWidth: 2,\n    },\n});\n"],"sourceRoot":""}